// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	time "time"

	fosite "github.com/ory/fosite"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ClientAssertionJWTValid mocks base method.
func (m *MockRepository) ClientAssertionJWTValid(ctx context.Context, jti string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientAssertionJWTValid", ctx, jti)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClientAssertionJWTValid indicates an expected call of ClientAssertionJWTValid.
func (mr *MockRepositoryMockRecorder) ClientAssertionJWTValid(ctx, jti any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientAssertionJWTValid", reflect.TypeOf((*MockRepository)(nil).ClientAssertionJWTValid), ctx, jti)
}

// CreateAccessTokenSession mocks base method.
func (m *MockRepository) CreateAccessTokenSession(ctx context.Context, signature string, request fosite.Requester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessTokenSession", ctx, signature, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessTokenSession indicates an expected call of CreateAccessTokenSession.
func (mr *MockRepositoryMockRecorder) CreateAccessTokenSession(ctx, signature, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessTokenSession", reflect.TypeOf((*MockRepository)(nil).CreateAccessTokenSession), ctx, signature, request)
}

// CreateAuthorizeCodeSession mocks base method.
func (m *MockRepository) CreateAuthorizeCodeSession(ctx context.Context, code string, request fosite.Requester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthorizeCodeSession", ctx, code, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthorizeCodeSession indicates an expected call of CreateAuthorizeCodeSession.
func (mr *MockRepositoryMockRecorder) CreateAuthorizeCodeSession(ctx, code, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizeCodeSession", reflect.TypeOf((*MockRepository)(nil).CreateAuthorizeCodeSession), ctx, code, request)
}

// CreateAuthorizeRequest mocks base method.
func (m *MockRepository) CreateAuthorizeRequest(ctx context.Context, request fosite.AuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthorizeRequest", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthorizeRequest indicates an expected call of CreateAuthorizeRequest.
func (mr *MockRepositoryMockRecorder) CreateAuthorizeRequest(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizeRequest", reflect.TypeOf((*MockRepository)(nil).CreateAuthorizeRequest), ctx, request)
}

// CreatePKCERequestSession mocks base method.
func (m *MockRepository) CreatePKCERequestSession(ctx context.Context, signature string, requester fosite.Requester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePKCERequestSession", ctx, signature, requester)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePKCERequestSession indicates an expected call of CreatePKCERequestSession.
func (mr *MockRepositoryMockRecorder) CreatePKCERequestSession(ctx, signature, requester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePKCERequestSession", reflect.TypeOf((*MockRepository)(nil).CreatePKCERequestSession), ctx, signature, requester)
}

// CreateRefreshTokenSession mocks base method.
func (m *MockRepository) CreateRefreshTokenSession(ctx context.Context, signature, accessSignature string, request fosite.Requester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshTokenSession", ctx, signature, accessSignature, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRefreshTokenSession indicates an expected call of CreateRefreshTokenSession.
func (mr *MockRepositoryMockRecorder) CreateRefreshTokenSession(ctx, signature, accessSignature, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshTokenSession", reflect.TypeOf((*MockRepository)(nil).CreateRefreshTokenSession), ctx, signature, accessSignature, request)
}

// DeleteAccessTokenSession mocks base method.
func (m *MockRepository) DeleteAccessTokenSession(ctx context.Context, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessTokenSession", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessTokenSession indicates an expected call of DeleteAccessTokenSession.
func (mr *MockRepositoryMockRecorder) DeleteAccessTokenSession(ctx, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessTokenSession", reflect.TypeOf((*MockRepository)(nil).DeleteAccessTokenSession), ctx, signature)
}

// DeleteAuthorizeRequest mocks base method.
func (m *MockRepository) DeleteAuthorizeRequest(ctx context.Context, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorizeRequest", ctx, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthorizeRequest indicates an expected call of DeleteAuthorizeRequest.
func (mr *MockRepositoryMockRecorder) DeleteAuthorizeRequest(ctx, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizeRequest", reflect.TypeOf((*MockRepository)(nil).DeleteAuthorizeRequest), ctx, requestID)
}

// DeletePKCERequestSession mocks base method.
func (m *MockRepository) DeletePKCERequestSession(ctx context.Context, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePKCERequestSession", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePKCERequestSession indicates an expected call of DeletePKCERequestSession.
func (mr *MockRepositoryMockRecorder) DeletePKCERequestSession(ctx, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePKCERequestSession", reflect.TypeOf((*MockRepository)(nil).DeletePKCERequestSession), ctx, signature)
}

// DeleteRefreshTokenSession mocks base method.
func (m *MockRepository) DeleteRefreshTokenSession(ctx context.Context, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshTokenSession", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshTokenSession indicates an expected call of DeleteRefreshTokenSession.
func (mr *MockRepositoryMockRecorder) DeleteRefreshTokenSession(ctx, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshTokenSession", reflect.TypeOf((*MockRepository)(nil).DeleteRefreshTokenSession), ctx, signature)
}

// GetAccessTokenSession mocks base method.
func (m *MockRepository) GetAccessTokenSession(ctx context.Context, signature string, session fosite.Session) (fosite.Requester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenSession", ctx, signature, session)
	ret0, _ := ret[0].(fosite.Requester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessTokenSession indicates an expected call of GetAccessTokenSession.
func (mr *MockRepositoryMockRecorder) GetAccessTokenSession(ctx, signature, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenSession", reflect.TypeOf((*MockRepository)(nil).GetAccessTokenSession), ctx, signature, session)
}

// GetAuthorizeCodeSession mocks base method.
func (m *MockRepository) GetAuthorizeCodeSession(ctx context.Context, code string, session fosite.Session) (fosite.Requester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizeCodeSession", ctx, code, session)
	ret0, _ := ret[0].(fosite.Requester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizeCodeSession indicates an expected call of GetAuthorizeCodeSession.
func (mr *MockRepositoryMockRecorder) GetAuthorizeCodeSession(ctx, code, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizeCodeSession", reflect.TypeOf((*MockRepository)(nil).GetAuthorizeCodeSession), ctx, code, session)
}

// GetAuthorizeRequest mocks base method.
func (m *MockRepository) GetAuthorizeRequest(ctx context.Context, requestID string) (fosite.AuthorizeRequester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizeRequest", ctx, requestID)
	ret0, _ := ret[0].(fosite.AuthorizeRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizeRequest indicates an expected call of GetAuthorizeRequest.
func (mr *MockRepositoryMockRecorder) GetAuthorizeRequest(ctx, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizeRequest", reflect.TypeOf((*MockRepository)(nil).GetAuthorizeRequest), ctx, requestID)
}

// GetClient mocks base method.
func (m *MockRepository) GetClient(ctx context.Context, id string) (fosite.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, id)
	ret0, _ := ret[0].(fosite.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockRepositoryMockRecorder) GetClient(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockRepository)(nil).GetClient), ctx, id)
}

// GetPKCERequestSession mocks base method.
func (m *MockRepository) GetPKCERequestSession(ctx context.Context, signature string, session fosite.Session) (fosite.Requester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPKCERequestSession", ctx, signature, session)
	ret0, _ := ret[0].(fosite.Requester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPKCERequestSession indicates an expected call of GetPKCERequestSession.
func (mr *MockRepositoryMockRecorder) GetPKCERequestSession(ctx, signature, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPKCERequestSession", reflect.TypeOf((*MockRepository)(nil).GetPKCERequestSession), ctx, signature, session)
}

// GetRefreshTokenSession mocks base method.
func (m *MockRepository) GetRefreshTokenSession(ctx context.Context, signature string, session fosite.Session) (fosite.Requester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenSession", ctx, signature, session)
	ret0, _ := ret[0].(fosite.Requester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenSession indicates an expected call of GetRefreshTokenSession.
func (mr *MockRepositoryMockRecorder) GetRefreshTokenSession(ctx, signature, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenSession", reflect.TypeOf((*MockRepository)(nil).GetRefreshTokenSession), ctx, signature, session)
}

// InvalidateAuthorizeCodeSession mocks base method.
func (m *MockRepository) InvalidateAuthorizeCodeSession(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateAuthorizeCodeSession", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateAuthorizeCodeSession indicates an expected call of InvalidateAuthorizeCodeSession.
func (mr *MockRepositoryMockRecorder) InvalidateAuthorizeCodeSession(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateAuthorizeCodeSession", reflect.TypeOf((*MockRepository)(nil).InvalidateAuthorizeCodeSession), ctx, code)
}

// RegisterClient mocks base method.
func (m *MockRepository) RegisterClient(ctx context.Context, client fosite.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClient", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterClient indicates an expected call of RegisterClient.
func (mr *MockRepositoryMockRecorder) RegisterClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClient", reflect.TypeOf((*MockRepository)(nil).RegisterClient), ctx, client)
}

// RevokeAccessToken mocks base method.
func (m *MockRepository) RevokeAccessToken(ctx context.Context, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccessToken", ctx, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAccessToken indicates an expected call of RevokeAccessToken.
func (mr *MockRepositoryMockRecorder) RevokeAccessToken(ctx, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccessToken", reflect.TypeOf((*MockRepository)(nil).RevokeAccessToken), ctx, requestID)
}

// RevokeRefreshToken mocks base method.
func (m *MockRepository) RevokeRefreshToken(ctx context.Context, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshToken", ctx, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRefreshToken indicates an expected call of RevokeRefreshToken.
func (mr *MockRepositoryMockRecorder) RevokeRefreshToken(ctx, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshToken", reflect.TypeOf((*MockRepository)(nil).RevokeRefreshToken), ctx, requestID)
}

// RotateRefreshToken mocks base method.
func (m *MockRepository) RotateRefreshToken(ctx context.Context, requestID, refreshTokenSignature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateRefreshToken", ctx, requestID, refreshTokenSignature)
	ret0, _ := ret[0].(error)
	return ret0
}

// RotateRefreshToken indicates an expected call of RotateRefreshToken.
func (mr *MockRepositoryMockRecorder) RotateRefreshToken(ctx, requestID, refreshTokenSignature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateRefreshToken", reflect.TypeOf((*MockRepository)(nil).RotateRefreshToken), ctx, requestID, refreshTokenSignature)
}

// SetClientAssertionJWT mocks base method.
func (m *MockRepository) SetClientAssertionJWT(ctx context.Context, jti string, exp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClientAssertionJWT", ctx, jti, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClientAssertionJWT indicates an expected call of SetClientAssertionJWT.
func (mr *MockRepositoryMockRecorder) SetClientAssertionJWT(ctx, jti, exp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientAssertionJWT", reflect.TypeOf((*MockRepository)(nil).SetClientAssertionJWT), ctx, jti, exp)
}

// MockDynamicClientStorage is a mock of DynamicClientStorage interface.
type MockDynamicClientStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicClientStorageMockRecorder
	isgomock struct{}
}

// MockDynamicClientStorageMockRecorder is the mock recorder for MockDynamicClientStorage.
type MockDynamicClientStorageMockRecorder struct {
	mock *MockDynamicClientStorage
}

// NewMockDynamicClientStorage creates a new mock instance.
func NewMockDynamicClientStorage(ctrl *gomock.Controller) *MockDynamicClientStorage {
	mock := &MockDynamicClientStorage{ctrl: ctrl}
	mock.recorder = &MockDynamicClientStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamicClientStorage) EXPECT() *MockDynamicClientStorageMockRecorder {
	return m.recorder
}

// RegisterClient mocks base method.
func (m *MockDynamicClientStorage) RegisterClient(ctx context.Context, client fosite.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClient", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterClient indicates an expected call of RegisterClient.
func (mr *MockDynamicClientStorageMockRecorder) RegisterClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClient", reflect.TypeOf((*MockDynamicClientStorage)(nil).RegisterClient), ctx, client)
}

// MockAuthorizeRequestStorage is a mock of AuthorizeRequestStorage interface.
type MockAuthorizeRequestStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizeRequestStorageMockRecorder
	isgomock struct{}
}

// MockAuthorizeRequestStorageMockRecorder is the mock recorder for MockAuthorizeRequestStorage.
type MockAuthorizeRequestStorageMockRecorder struct {
	mock *MockAuthorizeRequestStorage
}

// NewMockAuthorizeRequestStorage creates a new mock instance.
func NewMockAuthorizeRequestStorage(ctrl *gomock.Controller) *MockAuthorizeRequestStorage {
	mock := &MockAuthorizeRequestStorage{ctrl: ctrl}
	mock.recorder = &MockAuthorizeRequestStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizeRequestStorage) EXPECT() *MockAuthorizeRequestStorageMockRecorder {
	return m.recorder
}

// CreateAuthorizeRequest mocks base method.
func (m *MockAuthorizeRequestStorage) CreateAuthorizeRequest(ctx context.Context, request fosite.AuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthorizeRequest", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthorizeRequest indicates an expected call of CreateAuthorizeRequest.
func (mr *MockAuthorizeRequestStorageMockRecorder) CreateAuthorizeRequest(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizeRequest", reflect.TypeOf((*MockAuthorizeRequestStorage)(nil).CreateAuthorizeRequest), ctx, request)
}

// DeleteAuthorizeRequest mocks base method.
func (m *MockAuthorizeRequestStorage) DeleteAuthorizeRequest(ctx context.Context, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorizeRequest", ctx, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthorizeRequest indicates an expected call of DeleteAuthorizeRequest.
func (mr *MockAuthorizeRequestStorageMockRecorder) DeleteAuthorizeRequest(ctx, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizeRequest", reflect.TypeOf((*MockAuthorizeRequestStorage)(nil).DeleteAuthorizeRequest), ctx, requestID)
}

// GetAuthorizeRequest mocks base method.
func (m *MockAuthorizeRequestStorage) GetAuthorizeRequest(ctx context.Context, requestID string) (fosite.AuthorizeRequester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizeRequest", ctx, requestID)
	ret0, _ := ret[0].(fosite.AuthorizeRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizeRequest indicates an expected call of GetAuthorizeRequest.
func (mr *MockAuthorizeRequestStorageMockRecorder) GetAuthorizeRequest(ctx, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizeRequest", reflect.TypeOf((*MockAuthorizeRequestStorage)(nil).GetAuthorizeRequest), ctx, requestID)
}
